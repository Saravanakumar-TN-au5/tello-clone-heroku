{"version":3,"sources":["scenes/Home/Home.module.scss","components/Header/Header.module.scss","scenes/Home/components/Task/Task.module.scss","logo.svg","scenes/Home/components/List/List.module.scss","components/Header/index.js","redux/actions.js","scenes/Home/components/Task/index.js","scenes/Home/components/List/index.js","scenes/Home/index.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","Header","props","className","styles","actions","dispatch","axios","get","process","then","response","type","payload","data","id","updatedHead","cb","patch","name","listid","updatedName","task","updatedStatus","status","listId","post","setLists","updateListHead","updateTaskName","updateTaskStatus","createTask","createList","Task","state","editicon","React","createRef","edit","this","setState","prevsProps","prevsState","_id","length","updateName","updateStatus","onMouseOver","current","style","display","onMouseOut","ref","onClick","aria-hidden","map","stat","key","e","target","textContent","cols","onChange","value","onSave","Component","connect","List","headInput","addTaskInput","editHead","addTask","newTask","focus","select","updateHead","listItem","tasks","defaultValue","onBlur","saveHead","Home","addListInput","addList","newList","lists","onAddList","App","Boolean","window","location","hostname","match","initialState","reducer","action","stateCopy","index","findIndex","list","slice","listindex","taskindex","tsk","lisid","taske","lisindex","tasindex","i","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,WAAW,uBAAuB,eAAe,2BAA2B,WAAW,uBAAuB,aAAa,yBAAyB,WAAW,uBAAuB,YAAY,0B,mBCAxPD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,2ECAhED,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,OAAS,qBAAqB,QAAU,sBAAsB,WAAa,yBAAyB,UAAY,wBAAwB,SAAW,uBAAuB,YAAY,wBAAwB,SAAW,uBAAuB,KAAO,mBAAmB,WAAW,uBAAuB,YAAY,0B,mBCDxYD,EAAOC,QAAU,IAA0B,kC,uCCC3CD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,aAAa,yBAAyB,UAAU,sBAAsB,WAAW,uBAAuB,WAAW,uBAAuB,YAAY,0B,uJCUvNC,MARf,SAAgBC,GACZ,OACI,4BAAQC,UAAWC,IAAM,WACrB,yBAAKD,UAAWC,IAAM,OAAtB,W,kECLNC,EAAU,CAEhBA,SAAmB,WACf,OAAO,SAACC,GACJC,IAAMC,IAAN,UAAaC,iCAAb,WACCC,MAAK,SAAAC,GACFL,EAAS,CAACM,KAAM,YAAaC,QAASF,EAASG,YAK3DT,eAAyB,SAACU,EAAGC,EAAaC,GACtC,OAAO,SAACX,GACJC,IAAMW,MAAN,UAAeT,iCAAf,mBAA+D,CAACM,KAAGI,KAAMH,IACxEN,MAAK,SAAAC,GACFL,EAAS,CAACM,KAAM,mBAAoBC,QAASF,EAASG,OACtDG,SAKZZ,eAAyB,SAACe,EAAQL,EAAIM,GAClC,OAAO,SAACf,GACJC,IAAMW,MAAN,UAAeT,iCAAf,mBAA+D,CAACM,KAAGI,KAAME,IACxEX,MAAK,SAAAC,GACFL,EAAS,CAACM,KAAM,mBAAoBC,QAAS,CAACO,SAAQE,KAAMX,EAASG,aAKjFT,iBAA2B,SAACe,EAAQL,EAAIQ,GACpC,OAAO,SAACjB,GACJC,IAAMW,MAAN,UAAeT,iCAAf,qBAAiE,CAACM,KAAGS,OAAQD,IAC5Eb,MAAK,SAAAC,GACFL,EAAS,CAACM,KAAM,qBAAsBC,QAAS,CAACO,SAAQE,KAAMX,EAASG,aAKnFT,WAAqB,SAACoB,EAAQN,EAAMF,GAChC,OAAO,SAACX,GACJC,IAAMmB,KAAN,UAAcjB,iCAAd,eAA0D,CAACgB,SAAON,SACjET,MAAK,SAAAC,GACFL,EAAS,CAACM,KAAM,cAAeC,QAAS,CAACY,SAAQH,KAAMX,EAASG,QAChEG,SAKZZ,WAAqB,SAACc,EAAMF,GACxB,OAAO,SAACX,GACJC,IAAMmB,KAAN,UAAcjB,iCAAd,eAA0D,CAACU,SAC1DT,MAAK,SAAAC,GACFL,EAAS,CAACM,KAAM,cAAeC,QAASF,EAASG,OACjDG,UAMRU,EACAtB,EADAsB,SAAUC,EACVvB,EADUuB,eAAgBC,EAC1BxB,EAD0BwB,eAAgBC,EAC1CzB,EAD0CyB,iBAAkBC,EAC5D1B,EAD4D0B,WAAYC,EACxE3B,EADwE2B,WCxDtEC,E,4MACFC,MAAQ,CACJC,SAAWC,IAAMC,YACjBC,MAAM,EACNd,OAAQ,CAAC,UAAW,aAAc,YAAa,YAC/CD,cAAgB,GAChBF,YAAa,I,kEAGbkB,KAAKC,SAAS,CAACjB,cAAegB,KAAKrC,MAAMoB,KAAKE,W,yCAE/BiB,EAAWC,GACtBD,IAAeF,KAAKrC,OACpBqC,KAAKC,SAAS,CAACF,MAAM,M,+BAGnB,IAAD,EACqBC,KAAKrC,MAAMoB,KAAhCqB,EADA,EACAA,IAAKxB,EADL,EACKA,KAAMK,EADX,EACWA,OACZC,EAASc,KAAKrC,MAAMuB,OACpBc,KAAKL,MAAMb,YAAYuB,QAAUzB,IAASoB,KAAKL,MAAMb,aACrDkB,KAAKrC,MAAM2C,WAAWpB,EAAQkB,EAAKJ,KAAKL,MAAMb,aAE9CkB,KAAKL,MAAMX,eAAiBC,IAAWe,KAAKL,MAAMX,eAClDgB,KAAKrC,MAAM4C,aAAarB,EAAQkB,EAAKJ,KAAKL,MAAMX,iB,+BAG9C,IAAD,SACgBgB,KAAKrC,MAAMoB,KAA3BH,EADA,EACAA,KAAMK,EADN,EACMA,OACX,OACI,yBAAKrB,UAAWC,IAAM,UACtB2C,YAAcR,KAAKL,MAAMI,KAAmE,iBAAM,IAAlE,kBAAM,EAAKJ,MAAMC,SAASa,QAAQC,MAAMC,QAAU,SAClFC,WAAaZ,KAAKL,MAAMI,KAAiE,iBAAM,IAAhE,kBAAM,EAAKJ,MAAMC,SAASa,QAAQC,MAAMC,QAAU,SAC5EX,KAAKL,MAAMI,KAAO,GACnB,yBAAKnC,UAAWC,IAAO,aAAcgD,IAAKb,KAAKL,MAAMC,SACrDkB,QAAS,kBAAM,EAAKb,SAAS,CAACF,MAAM,MAChC,uBAAGnC,UAAU,eAAemD,cAAY,UAE5C,yBAAKnD,UAAWC,IAAM,QACjBmC,KAAKL,MAAMI,KACZ,6BAASnC,UAAWC,IAAM,UACrBmC,KAAKL,MAAMV,OAAO+B,KAAI,SAAAC,GACnB,OAAOA,IAAS,EAAKtB,MAAMX,cAC3B,yBAAKpB,UAAWC,IAAOoD,GAAOC,IAAKD,EACnCH,QAAS,SAACK,GAAD,OAAO,EAAKlB,SAAS,CAACjB,cAAemC,EAAEC,OAAOC,gBACrDJ,EAAK,0BAAMrD,UAAWC,IAAM,MAAvB,WACP,yBAAKD,UAAWC,IAAOoD,GAAOC,IAAKD,EACnCH,QAAS,SAACK,GAAD,OAAO,EAAKlB,SAAS,CAACjB,cAAemC,EAAEC,OAAOC,gBACrDJ,OAGV,yBAAKrD,UAAWC,IAAOoB,IAAUA,IAGrC,yBAAKrB,UAAWC,IAAM,MACjBmC,KAAKL,MAAMI,KACZ,8BAAUuB,KAAK,KAAKC,SAAU,SAACJ,GAAD,OAAK,EAAKlB,SAAS,CAACnB,YAAaqC,EAAEC,OAAOI,UACtE5C,GACF,8BAAOA,IAEVoB,KAAKL,MAAMI,KACZ,6BACA,4BAAQ1B,KAAK,SAAST,UAAWC,IAAO,YACxCiD,QAAS,kBAAM,EAAKW,WADpB,QAEA,4BAAQpD,KAAK,SAAST,UAAWC,IAAO,aACxCiD,QAAS,kBAAM,EAAKb,SAAS,CAACF,MAAM,MADpC,WAEQ,Q,GAjEL2B,aA8EJC,cAAQ,MAPI,SAAC5D,GACxB,MAAO,CACHuC,WAAY,SAACzB,EAAQL,EAAIM,GAAb,OAA6Bf,EAASuB,EAAeT,EAAQL,EAAIM,KAC7EyB,aAAc,SAAC1B,EAAQL,EAAIQ,GAAb,OAA+BjB,EAASwB,EAAiBV,EAAQL,EAAIQ,QAI5E2C,CAAkCjC,GC7E3CkC,E,4MACFjC,MAAQ,CACJkC,UAAWhC,IAAMC,YACjBgC,aAAejC,IAAMC,YACrBiC,UAAU,EACVC,SAAS,EACTC,QAAS,I,yDAED,IAAD,OACPjC,KAAKC,SAAS,CAAC8B,UAAU,IAAO,WAC5B,EAAKpC,MAAMkC,UAAUpB,QAAQyB,QAC7B,EAAKvC,MAAMkC,UAAUpB,QAAQ0B,c,+BAG5BhB,EAAG3C,GAAK,IAAD,OAEZwB,KAAKrC,MAAMyE,WAAW5D,EAAI2C,EAAEC,OAAOI,OADxB,WAAO,EAAKvB,SAAS,CAAC8B,UAAU,S,gCAGpC,IAAD,OACN/B,KAAKC,SAAS,CAAC+B,SAAS,IAAO,WAC3B,EAAKrC,MAAMmC,aAAarB,QAAQyB,a,mCAG1B,IAAD,OAETlC,KAAKrC,MAAM6B,WAAWQ,KAAKrC,MAAM0E,SAASjC,IAAKJ,KAAKL,MAAMsC,SAD/C,kBAAM,EAAKhC,SAAS,CAAC+B,SAAS,S,+BAGnC,IAAD,SACoBhC,KAAKrC,MAAM0E,SAA/BjC,EADA,EACAA,IAAKxB,EADL,EACKA,KAAM0D,EADX,EACWA,MAChB,OACI,6BAAS1E,UAAWC,IAAM,WACtB,yBAAKD,UAAWC,IAAM,KAAUiD,QAAS,kBAAM,EAAKiB,aAC/C/B,KAAKL,MAAMoC,SACZ,2BAAO1D,KAAK,OAAOT,UAAWC,IAAO,cACrC0E,aAAc3D,EAAMiC,IAAKb,KAAKL,MAAMkC,UACpCW,OAAQ,SAACrB,GAAD,OAAO,EAAKsB,SAAStB,EAAGf,MAChCxB,GAEJ,6BACK0D,EAAQA,EAAMtB,KAAI,SAAAjC,GACf,OAAO,kBAAC,EAAD,CAAMA,KAAMA,EAAMmC,IAAKnC,EAAKqB,IAAKlB,OAAQkB,OAChD,IAEPJ,KAAKL,MAAMqC,QACZ,yBAAKpE,UAAWC,IAAO,aACnB,2BAAOQ,KAAK,OAAOT,UAAWC,IAAO,cAAegD,IAAKb,KAAKL,MAAMmC,aACpEP,SAAU,SAACJ,GAAD,OAAO,EAAKlB,SAAS,CAACgC,QAASd,EAAEC,OAAOI,WAClD,4BAAQnD,KAAK,SAAST,UAAWC,IAAO,YACxCiD,QAAS,kBAAM,EAAKtB,eADpB,YAEA,4BAAQnB,KAAK,SAAST,UAAWC,IAAO,aACxCiD,QAAS,kBAAM,EAAKb,SAAS,CAAC+B,SAAS,MADvC,WAGH,yBAAKpE,UAAWC,IAAO,WAAYiD,QAAS,kBAAM,EAAKkB,YAAvD,mB,GApDEN,aAgEJC,cAAQ,MANI,SAAC5D,GACxB,MAAO,CACHqE,WAAY,SAAC5D,EAAIC,EAAaC,GAAlB,OAAyBX,EAASsB,EAAeb,EAAIC,EAAaC,KAC9Ec,WAAY,SAACN,EAAQN,EAAMF,GAAf,OAAsBX,EAASyB,EAAWN,EAAON,EAAKF,QAG3DiD,CAAkCC,GChE3Cc,E,4MACF/C,MAAQ,CACJgD,aAAc9C,IAAMC,YACpB8C,SAAS,EACTC,QAAS,I,0DAEA,IAAD,OACR7C,KAAKC,SAAS,CAAC2C,SAAS,IAAO,WAC3B,EAAKjD,MAAMgD,aAAalC,QAAQyB,a,mCAG1B,IAAD,OAETlC,KAAKrC,MAAM8B,WAAWO,KAAKL,MAAMkD,SADtB,kBAAM,EAAK5C,SAAS,CAAC2C,SAAS,S,+BAGnC,IAAD,OACL,OACI,6BAAShF,UAAWC,IAAM,WACrBmC,KAAKrC,MAAMmF,MAAM9B,KAAI,SAAAqB,GAClB,OAAO,kBAAC,EAAD,CAAMA,SAAUA,EAAUnB,IAAKmB,EAASjC,SAEnD,6BAASxC,UAAWC,IAAO,aAC1BmC,KAAKL,MAAMiD,QACZ,yBAAKhF,UAAWC,IAAO,aACnB,2BAAOQ,KAAK,OAAOT,UAAWC,IAAO,cAAegD,IAAKb,KAAKL,MAAMgD,aACpEpB,SAAU,SAACJ,GAAD,OAAO,EAAKlB,SAAS,CAAC4C,QAAS1B,EAAEC,OAAOI,WAClD,4BAAQnD,KAAK,SAAST,UAAWC,IAAO,YACxCiD,QAAS,kBAAM,EAAKrB,eADpB,YAEA,4BAAQpB,KAAK,SAAST,UAAWC,IAAO,aACxCiD,QAAS,kBAAM,EAAKb,SAAS,CAAC2C,SAAS,MADvC,WAGF,yBAAK9B,QAAS,kBAAM,EAAKiC,aAC3BnF,UAAWC,IAAO,iBADhB,oB,GA/BC6D,aAmDJC,eAZS,SAAChC,GACrB,MAAO,CACHmD,MAAOnD,EAAMmD,UAIM,SAAC/E,GACxB,MAAO,CACH0B,WAAa,SAACb,EAAMF,GAAP,OAAcX,EAAS0B,EAAWb,EAAMF,QAI9CiD,CAA6Ce,GCjDtDM,E,kLAEFhD,KAAKrC,MAAMyB,a,+BAGX,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARUsC,aAoBHC,cAAQ,MANI,SAAC5D,GAC1B,MAAO,CACLqB,SAAU,kBAAMrB,EAASqB,SAIduC,CAAiCqB,GChB5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BClBFC,EAAe,CACfR,MAAO,IA6DIS,EA1DC,WAAmC,IAAlC5D,EAAiC,uDAAzB2D,EAAcE,EAAW,uCAC1CC,EAAS,eAAQ9D,GACrB,OAAQ6D,EAAOnF,MACX,IAAK,YAED,OADAoF,EAAUX,MAAQU,EAAOlF,QAClBmF,EACX,IAAK,mBAAL,MACwBD,EAAOlF,QAArB8B,EADV,EACUA,IAAKxB,EADf,EACeA,KACP8E,EAAQD,EAAUX,MAAMa,WAAU,SAAAC,GAAI,OAAIA,EAAKxD,MAAQA,KAM3D,OALAqD,EAAUX,MAAV,sBACOW,EAAUX,MAAMe,MAAM,EAAGH,IADhC,4BAESD,EAAUX,MAAMY,IAFzB,IAEiC9E,UAFjC,YAGO6E,EAAUX,MAAMe,MAAMH,EAAQ,KAE9BD,EACX,IAAK,mBAAL,MAC2BD,EAAOlF,QAAxBO,EADV,EACUA,OAAQE,EADlB,EACkBA,KAEV+E,EAAYL,EAAUX,MAAMa,WAAU,SAAAC,GAAI,OAAIA,EAAKxD,MAAQvB,KAC3DkF,EAAYN,EAAUX,MAAMgB,GAAWxB,MAAMqB,WAAU,SAAAK,GAAG,OAAIA,EAAI5D,MAAQrB,EAAKqB,OAQnF,OAPAqD,EAAUX,MAAMgB,GAAhB,2BAAiCL,EAAUX,MAAMgB,IAAjD,IACIxB,MAAK,sBACEmB,EAAUX,MAAMgB,GAAWxB,MAAMuB,MAAM,EAAGE,IAD5C,4BAEIN,EAAUX,MAAMgB,GAAWxB,MAAMyB,IAFrC,IAEiDnF,KAAMG,EAAKH,QAF5D,YAGE6E,EAAUX,MAAMgB,GAAWxB,MAAMuB,MAAME,EAAY,OAE9DN,EAAUX,MAAV,YAAsBW,EAAUX,OACzBW,EACX,IAAK,qBACD,IAAIQ,EAAQT,EAAOlF,QAAQO,OACvBqF,EAAQV,EAAOlF,QAAQS,KACvBoF,EAAWV,EAAUX,MAAMa,WAAU,SAAAC,GAAI,OAAIA,EAAKxD,MAAQ6D,KAC1DG,EAAWX,EAAUX,MAAMqB,GAAU7B,MAAMqB,WAAU,SAAAK,GAAG,OAAIA,EAAI5D,MAAQ8D,EAAM9D,OASlF,OARAqD,EAAUX,MAAMqB,GAAhB,2BAAgCV,EAAUX,MAAMqB,IAAhD,IACI7B,MAAK,sBACEmB,EAAUX,MAAMqB,GAAU7B,MAAMuB,MAAM,EAAGO,IAD3C,4BAEIX,EAAUX,MAAMqB,GAAU7B,MAAM8B,IAFpC,IAE+CnF,OAAQiF,EAAMjF,UAF7D,YAGEwE,EAAUX,MAAMqB,GAAU7B,MAAMuB,MAAMO,EAAW,OAG5DX,EAAUX,MAAV,YAAsBW,EAAUX,OACzBW,EACX,IAAK,cACD,IAAIY,EAAIZ,EAAUX,MAAMa,WAAU,SAAAC,GAAI,OAAIA,EAAKxD,MAAQoD,EAAOlF,QAAQY,UAMtE,OALAuE,EAAUX,MAAV,sBACOW,EAAUX,MAAMe,MAAM,EAAGQ,IADhC,4BAESZ,EAAUX,MAAMuB,IAFzB,IAE6B/B,MAAM,GAAD,mBAAMmB,EAAUX,MAAMuB,GAAG/B,OAAzB,CAAgCkB,EAAOlF,QAAQS,UAFjF,YAGO0E,EAAUX,MAAMe,MAAMQ,EAAI,KAE1BZ,EACX,IAAK,cAED,OADAA,EAAUX,MAAV,sBAAsBW,EAAUX,OAAhC,CAAuCU,EAAOlF,UACvCmF,EACX,QACI,OAAOA,I,QCtDba,EAAmBpB,OAAOqB,sCAAwCC,IAEzDC,EADDC,YAAYnB,EAASe,EAAiBK,YAAgBC,OCGpEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GAAO,kBAAC,EAAD,QAE1BO,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjH,MAAK,SAAAkH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a42982e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__2A7pZ\",\"new-list\":\"Home_new-list__3yP09\",\"add-list-btn\":\"Home_add-list-btn__1X8RG\",\"add-list\":\"Home_add-list__14yAb\",\"head-input\":\"Home_head-input__Zm11X\",\"save-btn\":\"Home_save-btn__3bPqy\",\"close-btn\":\"Home_close-btn__vANFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__Sa3HT\",\"brand\":\"Header_brand__X4ZV6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Task_container__Oj-un\",\"head\":\"Task_head__2cT3Y\",\"status\":\"Task_status__3jG6u\",\"pending\":\"Task_pending__EUMbZ\",\"inprogress\":\"Task_inprogress__1r4Gv\",\"completed\":\"Task_completed__2hdFL\",\"rejected\":\"Task_rejected__1vbK-\",\"edit-icon\":\"Task_edit-icon__1A0gm\",\"statuses\":\"Task_statuses__3KL7E\",\"tick\":\"Task_tick__2WthY\",\"save-btn\":\"Task_save-btn__3bNXt\",\"close-btn\":\"Task_close-btn__2y0HG\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"List_container__1Z8bw\",\"head\":\"List_head__29tWp\",\"head-input\":\"List_head-input__10oyd\",\"add-btn\":\"List_add-btn__14oNO\",\"add-task\":\"List_add-task__En5FA\",\"save-btn\":\"List_save-btn__27QU7\",\"close-btn\":\"List_close-btn__2BeJb\"};","import React from 'react';\r\nimport styles from './Header.module.scss';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header className={styles['container']}>\r\n            <div className={styles['brand']}>Tello</div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import axios from 'axios';\r\nconst actions = {}\r\n\r\nactions.setLists = () => {\r\n    return (dispatch) => {\r\n        axios.get(`${process.env.REACT_APP_API_URI}/lists`)\r\n        .then(response => {\r\n            dispatch({type: 'SET_LISTS', payload: response.data});\r\n        })\r\n    }\r\n}\r\n\r\nactions.updateListHead = (id,updatedHead, cb) => {\r\n    return (dispatch) => {\r\n        axios.patch(`${process.env.REACT_APP_API_URI}/updateListName`, {id,name: updatedHead})\r\n        .then(response => {\r\n            dispatch({type: 'UPDATE_LIST_HEAD', payload: response.data});\r\n            cb();\r\n        })\r\n    }\r\n}\r\n\r\nactions.updateTaskName = (listid, id, updatedName) => {\r\n    return (dispatch) => {\r\n        axios.patch(`${process.env.REACT_APP_API_URI}/updateTaskName`, {id,name: updatedName})\r\n        .then(response => {\r\n            dispatch({type: 'UPDATE_TASK_NAME', payload: {listid, task: response.data}});\r\n        })\r\n    }\r\n}\r\n\r\nactions.updateTaskStatus = (listid, id, updatedStatus) => {\r\n    return (dispatch) => {\r\n        axios.patch(`${process.env.REACT_APP_API_URI}/updateTaskStatus`, {id,status: updatedStatus})\r\n        .then(response => {\r\n            dispatch({type: 'UPDATE_TASK_STATUS', payload: {listid, task: response.data}});\r\n        })\r\n    }\r\n}\r\n\r\nactions.createTask = (listId, name, cb) => {\r\n    return (dispatch) => {\r\n        axios.post(`${process.env.REACT_APP_API_URI}/createTask`, {listId,name})\r\n        .then(response => {\r\n            dispatch({type: 'CREATE_TASK', payload: {listId, task: response.data}});\r\n            cb();\r\n        })\r\n    }\r\n}\r\n\r\nactions.createList = (name, cb) => {\r\n    return (dispatch) => {\r\n        axios.post(`${process.env.REACT_APP_API_URI}/createList`, {name})\r\n        .then(response => {\r\n            dispatch({type: 'CREATE_LIST', payload: response.data});\r\n            cb();\r\n        })\r\n    }\r\n}\r\n\r\nexport const {\r\n    setLists, updateListHead, updateTaskName, updateTaskStatus, createTask, createList\r\n} = actions;","import React, { Component } from 'react';\r\nimport styles from './Task.module.scss';\r\nimport { updateTaskName, updateTaskStatus} from './../../../../redux/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Task extends Component {\r\n    state = {\r\n        editicon : React.createRef(),\r\n        edit: false,\r\n        status: ['pending', 'inprogress', 'completed', 'rejected'],\r\n        updatedStatus : '',\r\n        updatedName: ''\r\n    }\r\n    componentDidMount() {\r\n        this.setState({updatedStatus: this.props.task.status})\r\n    }\r\n    componentDidUpdate(prevsProps,prevsState) {\r\n        if (prevsProps !== this.props) {\r\n            this.setState({edit: false});\r\n        }\r\n    }\r\n    onSave() {\r\n        let {_id, name, status} = this.props.task;\r\n        let listId = this.props.listId;\r\n        if (this.state.updatedName.length && name !== this.state.updatedName) {\r\n            this.props.updateName(listId, _id, this.state.updatedName);\r\n        }\r\n        if (this.state.updatedStatus && status !== this.state.updatedStatus) {\r\n            this.props.updateStatus(listId, _id, this.state.updatedStatus);\r\n        }\r\n    }\r\n    render() {\r\n        let {name, status} = this.props.task\r\n        return (\r\n            <div className={styles['container']} \r\n            onMouseOver={!this.state.edit ? () => this.state.editicon.current.style.display = 'block' : () => ''}\r\n            onMouseOut={!this.state.edit ? () => this.state.editicon.current.style.display = 'none': () => ''}>\r\n                {this.state.edit ? '' : \r\n                <div className={styles['edit-icon']} ref={this.state.editicon}\r\n                onClick={() => this.setState({edit: true})}>\r\n                    <i className=\"fa fa-pencil\" aria-hidden=\"true\"></i>\r\n                </div>}\r\n                <div className={styles['status']}>\r\n                    {this.state.edit ? \r\n                    <section className={styles['statuses']}>\r\n                        {this.state.status.map(stat => {\r\n                            return stat === this.state.updatedStatus ?\r\n                            <div className={styles[stat]} key={stat}\r\n                            onClick={(e) => this.setState({updatedStatus: e.target.textContent})}\r\n                            >{stat}<span className={styles['tick']}>✔</span></div>:\r\n                            <div className={styles[stat]} key={stat}\r\n                            onClick={(e) => this.setState({updatedStatus: e.target.textContent})}\r\n                            >{stat}</div>\r\n                        })}\r\n                    </section>: \r\n                    <div className={styles[status]}>{status}</div>}\r\n                    \r\n                </div>\r\n                <div className={styles['head']}>\r\n                    {this.state.edit ? \r\n                    <textarea cols='30' onChange={(e)=>this.setState({updatedName: e.target.value})}\r\n                    >{name}</textarea>:\r\n                    <span>{name}</span>}\r\n                </div>\r\n                {this.state.edit ? \r\n                <div>\r\n                <button type='button' className={styles['save-btn']}\r\n                onClick={() => this.onSave()}>Save</button>\r\n                <button type='button' className={styles['close-btn']}\r\n                onClick={() => this.setState({edit: false})}>✖</button>\r\n                </div>: ''}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateName: (listid, id, updatedName) => dispatch(updateTaskName(listid, id, updatedName)),\r\n        updateStatus: (listid, id, updatedStatus) => dispatch(updateTaskStatus(listid, id, updatedStatus))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Task);","import React, { Component } from 'react';\r\nimport styles from './List.module.scss';\r\nimport Task from './../Task';\r\nimport { connect } from 'react-redux';\r\nimport { updateListHead, createTask } from './../../../../redux/actions';\r\n\r\nclass List extends Component {\r\n    state = {\r\n        headInput: React.createRef(),\r\n        addTaskInput : React.createRef(),\r\n        editHead: false,\r\n        addTask: false,\r\n        newTask: ''\r\n    }\r\n    editHead() {\r\n        this.setState({editHead: true}, () => {\r\n            this.state.headInput.current.focus();\r\n            this.state.headInput.current.select();\r\n        });\r\n    }\r\n    saveHead(e, id) {\r\n        const cb = () => {this.setState({editHead: false})};\r\n        this.props.updateHead(id, e.target.value, cb);\r\n    }\r\n    addTask() {\r\n        this.setState({addTask: true}, () => {\r\n            this.state.addTaskInput.current.focus();\r\n        });\r\n    }\r\n    createTask() {\r\n        const cb = () => this.setState({addTask: false});\r\n        this.props.createTask(this.props.listItem._id, this.state.newTask, cb);\r\n    }\r\n    render() {\r\n        let {_id, name, tasks} = this.props.listItem\r\n        return (\r\n            <section className={styles['container']}>\r\n                <div className={styles['head']} onClick={() => this.editHead()}>\r\n                    {this.state.editHead ? \r\n                    <input type='text' className={styles['head-input']} \r\n                    defaultValue={name} ref={this.state.headInput}\r\n                    onBlur={(e) => this.saveHead(e, _id)}/>:\r\n                    name}\r\n                </div>\r\n                <div>\r\n                    {tasks ? tasks.map(task => {\r\n                        return <Task task={task} key={task._id} listId={_id}/>\r\n                    }): ''}\r\n                </div>\r\n                {this.state.addTask ?\r\n                <div className={styles['add-task']}>\r\n                    <input type='text' className={styles['head-input']} ref={this.state.addTaskInput}\r\n                    onChange={(e) => this.setState({newTask: e.target.value})}/>\r\n                    <button type='button' className={styles['save-btn']}\r\n                    onClick={() => this.createTask()}>Add task</button>\r\n                    <button type='button' className={styles['close-btn']}\r\n                    onClick={() => this.setState({addTask: false})}>✖</button>\r\n                </div>\r\n                :<div className={styles['add-btn']} onClick={() => this.addTask()}>+ Add task</div>}\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateHead: (id, updatedHead, cb) => dispatch(updateListHead(id, updatedHead, cb)),\r\n        createTask: (listId, name, cb) => dispatch(createTask(listId,name,cb))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(List);","import React, { Component } from 'react';\r\nimport styles from './Home.module.scss';\r\nimport List from './components/List';\r\nimport { connect } from 'react-redux';\r\nimport { createList } from './../../redux/actions';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        addListInput: React.createRef(),\r\n        addList: false,\r\n        newList: ''\r\n    }\r\n    onAddList() {\r\n        this.setState({addList: true}, () => {\r\n            this.state.addListInput.current.focus();\r\n        });\r\n    }\r\n    createList() {\r\n        const cb = () => this.setState({addList: false});\r\n        this.props.createList(this.state.newList, cb);\r\n    }\r\n    render() {\r\n        return (\r\n            <section className={styles['container']}>\r\n                {this.props.lists.map(listItem => {\r\n                    return <List listItem={listItem} key={listItem._id}/>\r\n                })}\r\n                <section className={styles['new-list']}>\r\n                {this.state.addList ? \r\n                <div className={styles['add-list']}>\r\n                    <input type='text' className={styles['head-input']} ref={this.state.addListInput}\r\n                    onChange={(e) => this.setState({newList: e.target.value})}/>\r\n                    <button type='button' className={styles['save-btn']}\r\n                    onClick={() => this.createList()}>Add list</button>\r\n                    <button type='button' className={styles['close-btn']}\r\n                    onClick={() => this.setState({addList: false})}>✖</button>\r\n                </div>\r\n                : <div onClick={() => this.onAddList()}\r\n                className={styles['add-list-btn']}>+ Add list</div>}\r\n                </section>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        lists: state.lists\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createList : (name, cb) => dispatch(createList(name, cb))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Home from './scenes/Home';\nimport { setLists } from './redux/actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.setLists();\n  }\n  render() {\n    return (\n      <>\n        <Header/>\n        <Home/>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setLists: () => dispatch(setLists())\n  }\n}\n\nexport default connect(null,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n    lists: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case 'SET_LISTS':\r\n            stateCopy.lists = action.payload;\r\n            return stateCopy;\r\n        case 'UPDATE_LIST_HEAD':\r\n            let { _id, name } = action.payload;\r\n            let index = stateCopy.lists.findIndex(list => list._id === _id);\r\n            stateCopy.lists = [\r\n                ...stateCopy.lists.slice(0, index),\r\n                { ...stateCopy.lists[index], name },\r\n                ...stateCopy.lists.slice(index + 1)\r\n            ]\r\n            return stateCopy;\r\n        case 'UPDATE_TASK_NAME':\r\n            let { listid, task } = action.payload;\r\n            //let {_id, name} = task;\r\n            let listindex = stateCopy.lists.findIndex(list => list._id === listid);\r\n            let taskindex = stateCopy.lists[listindex].tasks.findIndex(tsk => tsk._id === task._id);\r\n            stateCopy.lists[listindex] = {...stateCopy.lists[listindex],  \r\n                tasks : [\r\n                    ...stateCopy.lists[listindex].tasks.slice(0, taskindex),\r\n                    { ...stateCopy.lists[listindex].tasks[taskindex], name: task.name },\r\n                    ...stateCopy.lists[listindex].tasks.slice(taskindex + 1),\r\n                ]}\r\n            stateCopy.lists = [...stateCopy.lists]\r\n            return stateCopy;\r\n        case 'UPDATE_TASK_STATUS':\r\n            let lisid = action.payload.listid;\r\n            let taske = action.payload.task;\r\n            let lisindex = stateCopy.lists.findIndex(list => list._id === lisid);\r\n            let tasindex = stateCopy.lists[lisindex].tasks.findIndex(tsk => tsk._id === taske._id);\r\n            stateCopy.lists[lisindex] = {...stateCopy.lists[lisindex],\r\n                tasks : [\r\n                    ...stateCopy.lists[lisindex].tasks.slice(0, tasindex),\r\n                    { ...stateCopy.lists[lisindex].tasks[tasindex], status: taske.status },\r\n                    ...stateCopy.lists[lisindex].tasks.slice(tasindex + 1),\r\n                ]\r\n            }\r\n            stateCopy.lists = [...stateCopy.lists]\r\n            return stateCopy;\r\n        case 'CREATE_TASK':\r\n            let i = stateCopy.lists.findIndex(list => list._id === action.payload.listId);\r\n            stateCopy.lists = [\r\n                ...stateCopy.lists.slice(0, i),\r\n                { ...stateCopy.lists[i], tasks: [...stateCopy.lists[i].tasks, action.payload.task] },\r\n                ...stateCopy.lists.slice(i + 1)\r\n            ]\r\n            return stateCopy;\r\n        case 'CREATE_LIST':\r\n            stateCopy.lists = [...stateCopy.lists, action.payload];\r\n            return stateCopy;\r\n        default:\r\n            return stateCopy;\r\n    }\r\n}\r\n\r\nexport default reducer;","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport reducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}